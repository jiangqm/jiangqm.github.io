{"title":"Webapck","uid":"d52b99c18188db71b708cd776c1bca0b","slug":"Webapck","date":"2022-03-27T11:22:08.000Z","updated":"2023-01-17T08:02:29.892Z","comments":true,"path":"api/articles/Webapck.json","keywords":null,"cover":null,"content":"<h1 id=\"Webapck\"><a href=\"#Webapck\" class=\"headerlink\" title=\"Webapck\"></a>Webapck</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ver 5</p></blockquote>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h5 id=\"入口（entry）\"><a href=\"#入口（entry）\" class=\"headerlink\" title=\"入口（entry）\"></a>入口（entry）</h5><p>​    <strong>入口起点(entry point)</strong> 指示 webpack 应该使用哪个模块，来作为构建其内部 <a href=\"https://webpack.docschina.org/concepts/dependency-graph/\">依赖图(dependency graph)</a> 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p>\n<p>默认值是 <code>./src/index.js</code>，但你可以通过在 <a href=\"https://webpack.docschina.org/configuration\">webpack configuration</a> 中配置 <code>entry</code> 属性，来指定一个（或多个）不同的入口起点。例如：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./path/to/my/entry/file.js'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"出口-output\"><a href=\"#出口-output\" class=\"headerlink\" title=\"出口(output)\"></a>出口(output)</h5><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em>，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p>\n<p>你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./path/to/my/entry/file.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 打包文件生成路径</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'my-first-webpack.bundle.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 文件名</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"转换器-loader\"><a href=\"#转换器-loader\" class=\"headerlink\" title=\"转换器(loader)\"></a>转换器(loader)</h5><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 <a href=\"https://webpack.docschina.org/concepts/modules\">模块</a>，以供应用程序使用，以及被添加到依赖图中</p>\n<p>在更高层面，在 webpack 的配置中，<strong>loader</strong> 有两个属性：</p>\n<ol>\n<li><code>test</code> 属性，识别出哪些文件会被转换。</li>\n<li><code>use</code> 属性，定义出在进行转换时，应该使用哪个 loader。</li>\n</ol>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 是</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'my-first-webpack.bundle.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 以.txt结尾的文件都用raw-loader转换一下</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.txt$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> use<span class=\"token operator\">:</span> <span class=\"token string\">'raw-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"插件-plugin\"><a href=\"#插件-plugin\" class=\"headerlink\" title=\"插件(plugin)\"></a>插件(plugin)</h5><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p>\n<p>想要使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建一个插件实例。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于访问内置插件</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.txt$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> use<span class=\"token operator\">:</span> <span class=\"token string\">'raw-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> template<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.html'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的示例中，<code>html-webpack-plugin</code> 为应用程序生成一个 HTML 文件，并自动将生成的所有 bundle 注入到此文件中。</p>\n<h5 id=\"模式-mode\"><a href=\"#模式-mode\" class=\"headerlink\" title=\"模式(mode)\"></a>模式(mode)</h5><p>通过选择 <code>development</code>, <code>production</code> 或 <code>none</code> 之中的一个，来设置 <code>mode</code> 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 <code>production</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><h5 id=\"单个入口\"><a href=\"#单个入口\" class=\"headerlink\" title=\"单个入口\"></a>单个入口</h5><p>用法：<code>entry: string | [string]</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./path/to/my/entry/file.js'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的写法相当于</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">main</span><span class=\"token operator\">:</span> <span class=\"token string\">'./path/to/my/entry/file.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>多入口</p>\n<p>我们也可以将一个文件路径数组传递给 <code>entry</code> 属性，这将创建一个所谓的 **”multi-main entry”**。在你想要一次注入多个依赖文件，并且将它们的依赖关系绘制在一个 “chunk” 中时，这种方式就很有用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./src/file_1.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/file_2.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"对象语法\"><a href=\"#对象语法\" class=\"headerlink\" title=\"对象语法\"></a>对象语法</h5><p>用法：<code>entry: &#123; &lt;entryChunkName&gt; string | [string] &#125; | &#123;&#125;</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">adminApp</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/adminApp.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对象语法会比较繁琐。然而，这是应用程序中定义入口的最可扩展的方式。</p>\n<h6 id=\"描述入口的对象\"><a href=\"#描述入口的对象\" class=\"headerlink\" title=\"描述入口的对象\"></a>描述入口的对象</h6><p>用于描述入口的对象。你可以使用如下属性：</p>\n<ul>\n<li><code>dependOn</code>: 当前入口所依赖的入口。它们必须在该入口被加载前被加载。</li>\n<li><code>filename</code>: 指定要输出的文件名称。</li>\n<li><code>import</code>: 启动时需加载的模块。</li>\n<li><code>library</code>: 指定 library 选项，为当前 entry 构建一个 library。</li>\n<li><code>runtime</code>: 运行时 chunk 的名字。如果设置了，就会创建一个新的运行时 chunk。在 webpack 5.43.0 之后可将其设为 <code>false</code> 以避免一个新的运行时 chunk。</li>\n<li><code>publicPath</code>: 当该入口的输出文件在浏览器中被引用时，为它们指定一个公共 URL 地址。请查看 <a href=\"https://webpack.docschina.org/configuration/output/#outputpublicpath\">output.publicPath</a>。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a2</span><span class=\"token operator\">:</span> <span class=\"token string\">'dependingfile.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">b2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">dependOn</span><span class=\"token operator\">:</span> <span class=\"token string\">'a2'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">import</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>tips</p>\n<p><code>runtime</code> 和 <code>dependOn</code> 不应在同一个入口上同时使用，所以如下配置无效，并且会抛出错误：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a2</span><span class=\"token operator\">:</span> <span class=\"token string\">'./a'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">b2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">runtime</span><span class=\"token operator\">:</span> <span class=\"token string\">'x2'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">dependOn</span><span class=\"token operator\">:</span> <span class=\"token string\">'a2'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">import</span><span class=\"token operator\">:</span> <span class=\"token string\">'./b'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>确保 <code>runtime</code> 不能指向已存在的入口名称，例如下面配置会抛出一个错误：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a1</span><span class=\"token operator\">:</span> <span class=\"token string\">'./a'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">b1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">runtime</span><span class=\"token operator\">:</span> <span class=\"token string\">'a1'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">import</span><span class=\"token operator\">:</span> <span class=\"token string\">'./b'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外 <code>dependOn</code> 不能是循环引用的，下面的例子也会出现错误：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a3</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">import</span><span class=\"token operator\">:</span> <span class=\"token string\">'./a'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">dependOn</span><span class=\"token operator\">:</span> <span class=\"token string\">'b3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">b3</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">import</span><span class=\"token operator\">:</span> <span class=\"token string\">'./b'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">dependOn</span><span class=\"token operator\">:</span> <span class=\"token string\">'a3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"出口-output-1\"><a href=\"#出口-output-1\" class=\"headerlink\" title=\"出口(output)\"></a>出口(output)</h3><p>可以通过配置 <code>output</code> 选项，告知 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个 <code>entry</code> 起点，但只能指定一个 <code>output</code> 配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此配置将一个单独的 <code>bundle.js</code> 文件输出到 <code>dist</code> 目录中。</p>\n<h6 id=\"多个入口起点\"><a href=\"#多个入口起点\" class=\"headerlink\" title=\"多个入口起点\"></a>多个入口起点</h6><p>如果配置中创建出多于一个 “chunk”（例如，使用多个入口起点或使用像 CommonsChunkPlugin 这样的插件），则应该使用 <a href=\"https://webpack.docschina.org/configuration/output#output-filename\">占位符(substitutions)</a> 来确保每个文件具有唯一的名称。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">search</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/search.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/dist'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 写入到硬盘：./dist/app.js, ./dist/search.js</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h3><p>在你的应用程序中，有两种使用 loader 的方式：</p>\n<ul>\n<li><a href=\"https://webpack.docschina.org/concepts/loaders/#configuration\">配置方式</a>（推荐）：在 <strong>webpack.config.js</strong> 文件中指定 loader。</li>\n<li><a href=\"https://webpack.docschina.org/concepts/loaders/#inline\">内联方式</a>：在每个 <code>import</code> 语句中显式指定 loader。</li>\n</ul>\n<p>注意在 webpack v4 版本可以通过 CLI 使用 loader，但是在 webpack v5 中被弃用</p>\n<h4 id=\"配置方式\"><a href=\"#配置方式\" class=\"headerlink\" title=\"配置方式\"></a>配置方式</h4><p><a href=\"https://webpack.docschina.org/configuration/module/#modulerules\"><code>module.rules</code></a> 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：</p>\n<p>loader <strong>从右到左（或从下到上）</strong>地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 <a href=\"https://webpack.docschina.org/concepts/loaders/#loader-features\">loader 功能</a> 章节，了解有关 loader 顺序的更多信息。</p>\n<pre class=\"line-numbers language-js-with-links\" data-language=\"js-with-links\"><code class=\"language-js-with-links\">module.exports &#x3D; &#123;\n  module: &#123;\n    rules: [\n      &#123;\n        test: &#x2F;\\.css$&#x2F;,\n        use: [\n          &#x2F;&#x2F; [style-loader](&#x2F;loaders&#x2F;style-loader)\n          &#123; loader: &#39;style-loader&#39; &#125;,\n          &#x2F;&#x2F; [css-loader](&#x2F;loaders&#x2F;css-loader)\n          &#123;\n            loader: &#39;css-loader&#39;,\n            options: &#123;\n              modules: true\n            &#125;\n          &#125;,\n          &#x2F;&#x2F; [sass-loader](&#x2F;loaders&#x2F;sass-loader)\n          &#123; loader: &#39;sass-loader&#39; &#125;\n        ]\n      &#125;\n    ]\n  &#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"内联方式\"><a href=\"#内联方式\" class=\"headerlink\" title=\"内联方式\"></a>内联方式</h4><p>可以在 <code>import</code> 语句或任何 <a href=\"https://webpack.docschina.org/api/module-methods\">与 “import” 方法同等的引用方式</a> 中指定 loader。使用 <code>!</code> 将资源中的 loader 分开。每个部分都会相对于当前目录解析。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Styles <span class=\"token keyword\">from</span> <span class=\"token string\">'style-loader!css-loader?modules!./styles.css'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"loader特性\"><a href=\"#loader特性\" class=\"headerlink\" title=\"loader特性\"></a>loader特性</h4><ul>\n<li>loader 支持链式调用。链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照相反的顺序执行。链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。</li>\n<li>loader 可以是同步的，也可以是异步的。</li>\n<li>loader 运行在 Node.js 中，并且能够执行任何操作。</li>\n<li>loader 可以通过 <code>options</code> 对象配置（仍然支持使用 <code>query</code> 参数来设置选项，但是这种方式已被废弃）。</li>\n<li>除了常见的通过 <code>package.json</code> 的 <code>main</code> 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 <code>loader</code> 字段直接引用一个模块。</li>\n<li>插件(plugin)可以为 loader 带来更多特性。</li>\n<li>loader 能够产生额外的任意文件。</li>\n</ul>\n<p>可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言转译（或编译）和 <a href=\"https://webpack.docschina.org/loaders\">更多其他特性</a>。</p>\n<h4 id=\"解析loader\"><a href=\"#解析loader\" class=\"headerlink\" title=\"解析loader\"></a>解析loader</h4><p>loader 遵循标准 <a href=\"https://webpack.docschina.org/concepts/module-resolution/\">模块解析</a> 规则。多数情况下，loader 将从 <a href=\"https://webpack.docschina.org/concepts/module-resolution/#module-paths\">模块路径</a> 加载（通常是从 <code>npm install</code>, <code>node_modules</code> 进行加载）。</p>\n<p>我们预期 loader 模块导出为一个函数，并且编写为 Node.js 兼容的 JavaScript。通常使用 npm 进行管理 loader，但是也可以将应用程序中的文件作为自定义 loader。按照约定，loader 通常被命名为 <code>xxx-loader</code>（例如 <code>json-loader</code>）。更多详细信息，请查看 <a href=\"https://webpack.docschina.org/contribute/writing-a-loader/\">编写一个 loader</a>。</p>\n<h4 id=\"编写自己的loader\"><a href=\"#编写自己的loader\" class=\"headerlink\" title=\"编写自己的loader\"></a>编写自己的loader</h4><p>一个loader 的本质就是一个nodejs模块，这个模块导出一个函数，这个导出函数的工作就是**获取处理前的内容(source参数的值)**，返回处理后的内容</p>\n<p>一个最简单的loader源码如下：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 这边不做处理直接返回</span>\n    <span class=\"token keyword\">return</span> source\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于loader是运行在nodeJs环境中，所以可以调用nodejs的API或者安装第三方插件</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-sass'</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//  这边调用sass插件对资源进行转换，返回转换后的资源</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sass</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>webpack.config.js引入自定义loader需要<code>path.reslove转换下，不能直接require引入</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> CleanWebpackPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clean-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./src/main.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 入口文件</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[name].[hash:8].js\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 打包后的文件名称</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 打包后的目录</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// .txt后缀的文件用自定义loader解析</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.txt$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/loader/myloader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 打包前删除原先的打包目录</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//配置静态模板</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./public/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h3><h4 id=\"剖析\"><a href=\"#剖析\" class=\"headerlink\" title=\"剖析\"></a>剖析</h4><p>webpack <strong>插件</strong>是一个具有 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply</code></a> 方法的 JavaScript 对象。<code>apply</code> 方法会被 webpack compiler 调用，并且在 <strong>整个</strong> 编译生命周期都可以访问 compiler 对象。</p>\n<h6 id=\"自定义Plugin\"><a href=\"#自定义Plugin\" class=\"headerlink\" title=\"自定义Plugin\"></a>自定义Plugin</h6><p><strong>ConsoleLogOnBuildWebpackPlugin.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pluginName <span class=\"token operator\">=</span> <span class=\"token string\">'ConsoleLogOnBuildWebpackPlugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsoleLogOnBuildWebpackPlugin</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>pluginName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack 构建正在启动！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> ConsoleLogOnBuildWebpackPlugin<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>compiler hook 的 tap 方法的第一个参数，应该是驼峰式命名的插件名称。建议为此使用一个常量，以便它可以在所有 hook 中重复使用。</p>\n","feature":true,"text":"Webapck ver 5 基本概念入口（entry）​ 入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Webapck\"><span class=\"toc-text\">Webapck</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%A5%E5%8F%A3%EF%BC%88entry%EF%BC%89\"><span class=\"toc-text\">入口（entry）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%87%BA%E5%8F%A3-output\"><span class=\"toc-text\">出口(output)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E6%8D%A2%E5%99%A8-loader\"><span class=\"toc-text\">转换器(loader)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6-plugin\"><span class=\"toc-text\">插件(plugin)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F-mode\"><span class=\"toc-text\">模式(mode)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A5%E5%8F%A3\"><span class=\"toc-text\">入口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%B8%AA%E5%85%A5%E5%8F%A3\"><span class=\"toc-text\">单个入口</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">对象语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0%E5%85%A5%E5%8F%A3%E7%9A%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">描述入口的对象</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BA%E5%8F%A3-output-1\"><span class=\"toc-text\">出口(output)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%B8%AA%E5%85%A5%E5%8F%A3%E8%B5%B7%E7%82%B9\"><span class=\"toc-text\">多个入口起点</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Loader\"><span class=\"toc-text\">Loader</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">配置方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E8%81%94%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">内联方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#loader%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">loader特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90loader\"><span class=\"toc-text\">解析loader</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84loader\"><span class=\"toc-text\">编写自己的loader</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Plugin\"><span class=\"toc-text\">Plugin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%96%E6%9E%90\"><span class=\"toc-text\">剖析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89Plugin\"><span class=\"toc-text\">自定义Plugin</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"kermit","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前端SEO优化","uid":"00cded0b700d2d3ec74ef7677b631c20","slug":"前端SEO优化","date":"2022-03-28T09:32:48.000Z","updated":"2023-01-17T08:02:29.892Z","comments":true,"path":"api/articles/前端SEO优化.json","keywords":null,"cover":[],"text":"前端SEO优化简介 SEO是Search Engine Optimization的缩写，即：搜索引擎优化，指通过了解搜索引擎原理和其运算法则的理解，在其基础之上，对网站进行内外部调优，改进网站在搜索引擎中的自然排名，获得更多的展现量，吸引更多目标客户点击访问网站，提高用户体验（U...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"kermit","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}